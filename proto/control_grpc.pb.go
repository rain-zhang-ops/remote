// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/control.proto

package controlpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceRegistry_RegisterDevice_FullMethodName = "/control.DeviceRegistry/RegisterDevice"
)

// DeviceRegistryClient is the client API for DeviceRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceRegistryClient interface {
	RegisterDevice(ctx context.Context, in *EnrollReq, opts ...grpc.CallOption) (*EnrollResp, error)
}

type deviceRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceRegistryClient(cc grpc.ClientConnInterface) DeviceRegistryClient {
	return &deviceRegistryClient{cc}
}

func (c *deviceRegistryClient) RegisterDevice(ctx context.Context, in *EnrollReq, opts ...grpc.CallOption) (*EnrollResp, error) {
	out := new(EnrollResp)
	err := c.cc.Invoke(ctx, DeviceRegistry_RegisterDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceRegistryServer is the server API for DeviceRegistry service.
// All implementations must embed UnimplementedDeviceRegistryServer
// for forward compatibility
type DeviceRegistryServer interface {
	RegisterDevice(context.Context, *EnrollReq) (*EnrollResp, error)
	mustEmbedUnimplementedDeviceRegistryServer()
}

// UnimplementedDeviceRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceRegistryServer struct {
}

func (UnimplementedDeviceRegistryServer) RegisterDevice(context.Context, *EnrollReq) (*EnrollResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedDeviceRegistryServer) mustEmbedUnimplementedDeviceRegistryServer() {}

// UnsafeDeviceRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceRegistryServer will
// result in compilation errors.
type UnsafeDeviceRegistryServer interface {
	mustEmbedUnimplementedDeviceRegistryServer()
}

func RegisterDeviceRegistryServer(s grpc.ServiceRegistrar, srv DeviceRegistryServer) {
	s.RegisterService(&DeviceRegistry_ServiceDesc, srv)
}

func _DeviceRegistry_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistry_RegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServer).RegisterDevice(ctx, req.(*EnrollReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceRegistry_ServiceDesc is the grpc.ServiceDesc for DeviceRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control.DeviceRegistry",
	HandlerType: (*DeviceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _DeviceRegistry_RegisterDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/control.proto",
}
